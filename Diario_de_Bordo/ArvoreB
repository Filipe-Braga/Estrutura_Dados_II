#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>

int ordem = 4;

// Estrutura
typedef struct No {
    int nChaves;
    int *chaves;
    struct No **filhos;
    bool folha;
} No;

// Cria nó
No* criarNo(bool folha) {
    No* novo = (No*) malloc(sizeof(No));
    if (!novo) {
        perror("Erro de alocação de memória");
        exit(EXIT_FAILURE);
    }
    novo->nChaves = 0;
    novo->folha = folha;
    novo->chaves = (int*) malloc((ordem - 1) * sizeof(int));
    novo->filhos = (No**) malloc(ordem * sizeof(No*));
    for (int i = 0; i < ordem; i++) {
        novo->filhos[i] = NULL;
    }
    return novo;
}

// Divide nó cheio
void dividirNo(No *pai, int idx) {
    No *filho = pai->filhos[idx];
    No *novo = criarNo(filho->folha);
    novo->nChaves = ordem / 2 - 1;

    for (int j = 0; j < ordem / 2 - 1; j++) {
        novo->chaves[j] = filho->chaves[j + ordem / 2];
    }

    if (!filho->folha) {
        for (int j = 0; j < ordem / 2; j++) {
            novo->filhos[j] = filho->filhos[j + ordem / 2];
        }
    }

    filho->nChaves = ordem / 2 - 1;

    for (int j = pai->nChaves; j > idx; j--) {
        pai->filhos[j + 1] = pai->filhos[j];
    }

    pai->filhos[idx + 1] = novo;

    for (int j = pai->nChaves - 1; j >= idx; j--) {
        pai->chaves[j + 1] = pai->chaves[j];
    }

    pai->chaves[idx] = filho->chaves[ordem / 2 - 1];
    pai->nChaves++;
}

// Insere chave em nó que não está cheio
void inserirNaoCheio(No *no, int chave) {
    int i = no->nChaves - 1;

    if (no->folha) {
        while (i >= 0 && chave < no->chaves[i]) {
            no->chaves[i + 1] = no->chaves[i];
            i--;
        }
        no->chaves[i + 1] = chave;
        no->nChaves++;
    } else {
        while (i >= 0 && chave < no->chaves[i]) {
            i--;
        }
        i++;
        if (no->filhos[i]->nChaves == ordem - 1) {
            dividirNo(no, i);
            if (chave > no->chaves[i]) {
                i++;
            }
        }
        inserirNaoCheio(no->filhos[i], chave);
    }
}

// Insere chave em nó cheio
void adicionarChave(No **raiz, int chave) {
    No *r = *raiz;
    if (r == NULL) {
        *raiz = criarNo(true);
        (*raiz)->chaves[0] = chave;
        (*raiz)->nChaves = 1;
    } else {
        if (r->nChaves == ordem - 1) {
            No *novaRaiz = criarNo(false);
            novaRaiz->filhos[0] = r;
            dividirNo(novaRaiz, 0);
            *raiz = novaRaiz;
        }
        inserirNaoCheio(*raiz, chave);
    }
}

// Exibe árvore
void exibirArvore(No *no, int nivel) {
    if (!no) return;

    for (int i = 0; i < nivel; i++) printf("   ");
    printf("[");

    for (int i = 0; i < no->nChaves; i++) {
        printf(" %d ", no->chaves[i]);
    }
    printf("]");

    printf("\n\n");

    if (!no->folha) {
        for (int i = 0; i <= no->nChaves; i++) {
            exibirArvore(no->filhos[i], nivel + 1);
        }
    }
}

// Substitui ordem da árvore
void definirOrdem() {
    int novaOrdem;
    printf("Digite a nova ordem da árvore B (mínimo 3): ");
    scanf("%d", &novaOrdem);
    if (novaOrdem >= 3) {
        ordem = novaOrdem;
    } else {
        printf("Ordem inválida. A ordem mínima é 3.\n");
    }
}

// Função principal para o menu
int main() {
    No *raiz = NULL;
    int opcao, chave;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Inserir chave\n");
        printf("2. Exibir árvore\n");
        printf("3. Definir nova ordem\n");
        printf("4. Sair\n");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("\nDigite a chave para inserir: ");
                scanf("%d", &chave);
                adicionarChave(&raiz, chave);
                printf("Chave %d inserida.\n", chave);
                break;
            case 2:
                printf("\nÁrvore B:\n");
                exibirArvore(raiz, 0);
                break;
            case 3:
                definirOrdem();
                raiz = NULL;  // Redefine a árvore para a nova ordem
                printf("\nOrdem da árvore definida para %d.\n", ordem);
                break;
            case 4:
                printf("\nFim\n");
                exit(0);
            default:
                printf("Opção inválida\n");
        }
    }

    return 0;
}

