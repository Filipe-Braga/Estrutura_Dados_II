#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct NoTreap {
    int chave, prioridade;
    struct NoTreap *esq, *dir;
};

struct NoTreap *criarNo(int chave) {
    struct NoTreap *novo = malloc(sizeof(struct NoTreap));
    novo->chave = chave;
    novo->prioridade = rand() % 100;
    novo->esq = novo->dir = NULL;
    return novo;
}

struct NoTreap *rotacionarParaBaixo(struct NoTreap **no, int dir) {
    struct NoTreap *filho = dir ? (*no)->dir : (*no)->esq;
    if (dir) {
        (*no)->dir = filho->esq;
        filho->esq = *no;
    } else {
        (*no)->esq = filho->dir;
        filho->dir = *no;
    }
    *no = filho;
    return filho;
}

struct NoTreap *inserirNaTreap(struct NoTreap *raiz, int chave) {
    if (raiz == NULL)
        return criarNo(chave);

    struct NoTreap **atual = &raiz;
    while (*atual != NULL) {
        if (chave < (*atual)->chave) {
            if ((*atual)->esq == NULL) {
                (*atual)->esq = criarNo(chave);
                if ((*atual)->esq->prioridade > (*atual)->prioridade)
                    raiz = rotacionarParaBaixo(atual, 0);
                break;
            } else
                atual = &(*atual)->esq;
        } else {
            if ((*atual)->dir == NULL) {
                (*atual)->dir = criarNo(chave);
                if ((*atual)->dir->prioridade > (*atual)->prioridade)
                    raiz = rotacionarParaBaixo(atual, 1);
                break;
            } else
                atual = &(*atual)->dir;
        }
    }

    return raiz;
}

struct NoTreap *removerDaTreap(struct NoTreap *raiz, int chave) {
    if (raiz == NULL)
        return NULL;

    if (chave < raiz->chave) {
        raiz->esq = removerDaTreap(raiz->esq, chave);
    } else if (chave > raiz->chave) {
        raiz->dir = removerDaTreap(raiz->dir, chave);
    } else {
        if (raiz->esq == NULL || raiz->dir == NULL) {
            struct NoTreap *temp = raiz->esq ? raiz->esq : raiz->dir;
            free(raiz);
            return temp;
        }

        struct NoTreap **maiorPrioridade =
            raiz->esq->prioridade > raiz->dir->prioridade ? &raiz->esq : &raiz->dir;
        raiz = rotacionarParaBaixo(maiorPrioridade, maiorPrioridade == &raiz->dir);
        *maiorPrioridade = removerDaTreap(*maiorPrioridade, chave);
    }
    return raiz;
}

void exibirTreap(struct NoTreap *raiz, int nivel) {
    if (!raiz) return;

    exibirTreap(raiz->dir, nivel + 1);
    for (int i = 0; i < nivel; i++) printf("   ");
    printf("[%d (P:%d)]\n", raiz->chave, raiz->prioridade);
    exibirTreap(raiz->esq, nivel + 1);
}

int main() {
    srand(time(0));
    struct NoTreap *raiz = NULL;
    int opcao, chave;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Inserir chave\n");
        printf("2. Exibir Treap\n");
        printf("3. Remover chave\n");
        printf("4. Sair\n");

        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                printf("Digite a chave para inserir: ");
                scanf("%d", &chave);
                raiz = inserirNaTreap(raiz, chave);
                printf("Chave %d inserida.\n", chave);
                break;
            case 2:
                printf("\nTreap:\n");
                exibirTreap(raiz, 0);
                break;
            case 3:
                printf("Digite a chave para remover: ");
                scanf("%d", &chave);
                raiz = removerDaTreap(raiz, chave);
                printf("Chave %d removida.\n", chave);
                break;
            case 4:
                printf("Saindo...\n");
                exit(0);
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    }

    return 0;
}

